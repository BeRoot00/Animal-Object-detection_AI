import cv2 as cv
import numpy as np
import os.path
import sys
import argparse


# Initialization of parameters
inpWidth = 416       #Input image widht
inpHeight = 416      #Input image hight
confThreshold = 0.5  #Confidence threshold
nmsThreshold = 0.4   #Non-maximum suppression threshold


parser = argparse.ArgumentParser(description='Program for object detection using YOLO with OpenCV2')
parser.add_argument('--device', default='cpu', help="Choose the device for executing inference: 'cpu' or 'gpu'.")
parser.add_argument('--video', help='Give the path to video file.')
parser.add_argument('--image', help='Give the path to image file.')
args = parser.parse_args()

#provide the model's configuration and weight file, and utilize them to load the network.
modelConfiguration = "yolov3.cfg"
modelWeights = "yolov3.weights"
net = cv.dnn.readNetFromDarknet(modelConfiguration, modelWeights)

#To load names of classes
classesFile = "coco.names"
classes = None
with open(classesFile, 'rt') as f:
    classes = f.read().rstrip('\n').split('\n')

if(args.device == 'cpu'):
    net.setPreferableBackend(cv.dnn.DNN_BACKEND_OPENCV)
    net.setPreferableTarget(cv.dnn.DNN_TARGET_CPU)

elif(args.device == 'gpu'):
    net.setPreferableBackend(cv.dnn.DNN_BACKEND_CUDA)
    net.setPreferableTarget(cv.dnn.DNN_TARGET_CUDA)

#Illustrate the bounding box that corresponds to the predicted outcome.
def drawPred(classId, conf, left, top, right, bottom):
    cv.rectangle(frame, (left, top), (right, bottom), (255, 178, 50), 3)
    label = '%.2f' % conf

    # Retrieve the class name and its corresponding confidence level for the label.
    if classes:
        assert (classId < len(classes))
        label = '%s:%s' % (classes[classId], label)

    # Present the label at the upper section of the bounding box.
    labelSize, baseLine = cv.getTextSize(label, cv.FONT_HERSHEY_SIMPLEX, 0.5, 1)
    top = max(top, labelSize[1])
    cv.rectangle(frame, (left, top - round(1.5 * labelSize[1])), (left + round(1.5 * labelSize[0]), top + baseLine),
                 (255, 255, 255), cv.FILLED)
    cv.putText(frame, label, (left, top), cv.FONT_HERSHEY_SIMPLEX, 0.75, (0, 0, 0), 1)

#Retrieve the names of the output layers.
def getOutputsNames(net):
    layersNames = net.getLayerNames()
    return [layersNames[i - 1] for i in net.getUnconnectedOutLayers()]



# Eliminate bounding boxes with low confidence by employing non-maximum suppression.
def postprocess(frame, outs):
    frameHeight = frame.shape[0]
    frameWidth = frame.shape[1]

    """Examine all the bounding boxes generated by the network and retain only those with significant confidence scores. 
    Set the class label of each box as the label with the highest score."""
    classIds = []
    confidences = []
    boxes = []
    for out in outs:
        for detection in out:
            scores = detection[5:]
            classId = np.argmax(scores)
            confidence = scores[classId]
            if confidence > confThreshold:
                center_x = int(detection[0] * frameWidth)
                center_y = int(detection[1] * frameHeight)
                width = int(detection[2] * frameWidth)
                height = int(detection[3] * frameHeight)
                left = int(center_x - width / 2)
                top = int(center_y - height / 2)
                classIds.append(classId)
                confidences.append(float(confidence))
                boxes.append([left, top, width, height])

    """Execute non-maximum suppression to eliminate redundant overlapping boxes that have lower confidence scores."""
    indices = cv.dnn.NMSBoxes(boxes, confidences, confThreshold, nmsThreshold)
    for i in indices:
        box = boxes[i]
        left = box[0]
        top = box[1]
        width = box[2]
        height = box[3]
        drawPred(classIds[i], confidences[i], left, top, left + width, top + height)

# Handle the input data.
winName = 'Object detection with OpenCV'
cv.namedWindow(winName, cv.WINDOW_NORMAL)

outputFile = "output.avi"
if (args.image):
    if not os.path.isfile(args.image):
        print("Your input image file ", args.image, " doesn't exist")
        sys.exit(1)
    cap = cv.VideoCapture(args.image)
    outputFile = args.image[:-4]+'_output.jpg'
elif (args.video):
    if not os.path.isfile(args.video):
        print("Your input video file ", args.video, " doesn't exist")
        sys.exit(1)
    cap = cv.VideoCapture(args.video)
    outputFile = args.video[:-4]+'_output.avi'
else:
    # Webcam input
    cap = cv.VideoCapture(0)
# Get the video writer initialized to save the output video
if (not args.image):
    vid_writer = cv.VideoWriter(outputFile, cv.VideoWriter_fourcc('M','J','P','G'), 30, (round(cap.get(cv.CAP_PROP_FRAME_WIDTH)),round(cap.get(cv.CAP_PROP_FRAME_HEIGHT))))

while cv.waitKey(1) < 0:
    # Retrieve a frame from the video.
    hasFrame, frame = cap.read()

    # Stop the program if reached end of video
    if not hasFrame:
        print("Done processing !!!")
        print("Output file is stored as ", outputFile)
        cv.waitKey(3000)
        # Release device
        cap.release()
        break

    # Generate a 4D blob from a frame.
    blob = cv.dnn.blobFromImage(frame, 1 / 255, (inpWidth, inpHeight), [0, 0, 0], 1, crop=False)

    # Transform the frame into a 4D blob.
    net.setInput(blob)

    # Perform a forward pass to obtain the output of the output layers.
    outs = net.forward(getOutputsNames(net))

    # Discard the bounding boxes with low confidence levels.
    postprocess(frame, outs)

    """Include efficiency information. 
    The function getPerfProfile provides the total inference time (t) and the individual timings for each layer (stored in layersTimes).
    """
    t, _ = net.getPerfProfile()
    label = 'Inference time: %.2f ms' % (t * 1000.0 / cv.getTickFrequency())
    cv.putText(frame, label, (0, 15), cv.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255))

    # Persist the frame with the detected bounding boxes.
    if (args.image):
        cv.imwrite(outputFile, frame.astype(np.uint8))
    else:
        vid_writer.write(frame.astype(np.uint8))

    cv.imshow(winName, frame)
